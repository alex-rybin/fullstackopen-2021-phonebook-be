{"version":3,"sources":["Filter.js","AddPersonForm.js","PersonItem.js","PersonsList.js","services/contacts.js","Notification.js","App.js","index.js"],"names":["Filter","value","onChange","event","target","AddPersonForm","name","number","onNameChange","onNumberChange","onSubmit","type","PersonItem","onDeleteClick","onClick","PersonsList","persons","filter","person","toLowerCase","includes","map","id","baseUrl","service","getAll","axios","get","then","response","data","create","newContact","post","deleteContact","contactId","delete","update","newData","put","Notification","message","className","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","setFilter","notification","setNotification","notificationType","setNotificationType","useEffect","contactsService","showNotification","setTimeout","preventDefault","currentContact","find","window","confirm","concat","contactName","catch","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.572c5b8c.chunk.js","sourcesContent":["import React from 'react'\n\nconst Filter = ({value, onChange}) => (\n    <>\n        filter shown with <input onChange={(event => onChange(event.target.value))}\n                                 value={value}/>\n    </>\n)\n\nexport default Filter\n","import React from 'react'\n\nconst AddPersonForm = ({name, number, onNameChange, onNumberChange, onSubmit}) => (\n    <form onSubmit={onSubmit}>\n        <div>\n            name: <input onChange={(event) => onNameChange(event.target.value)}\n                         value={name}/>\n        </div>\n        <div>number: <input onChange={(event) => onNumberChange(event.target.value)}\n                            value={number}/></div>\n        <div>\n            <button type=\"submit\">add</button>\n        </div>\n    </form>\n)\n\nexport default AddPersonForm\n","import React from 'react'\n\nconst PersonItem = ({name, number, onDeleteClick}) => (\n    <>\n        <span key={name}>{name} {number}</span>\n        <button onClick={onDeleteClick}>delete</button>\n        <br/>\n    </>\n)\n\nexport default PersonItem\n","import React from 'react'\nimport PersonItem from './PersonItem'\n\nconst PersonsList = ({persons, filter, onDeleteClick}) => (\n    <>\n        {persons.filter(\n            (person) => person.name.toLowerCase().includes(filter.toLowerCase())\n        ).map(\n            person => <PersonItem key={person.id} name={person.name} number={person.number}\n                                  onDeleteClick={() => onDeleteClick(person.id)}/>\n        )}\n    </>\n)\n\nexport default PersonsList\n","import axios from 'axios'\n\nconst baseUrl = 'http://localhost:3001/persons/'\n\nconst getAll = () => {\n    return axios.get(baseUrl).then(response => response.data)\n}\n\nconst create = newContact => {\n    return axios.post(baseUrl, newContact).then(response => response.data)\n}\n\nconst deleteContact = contactId => {\n    return axios.delete(`${baseUrl}${contactId}/`).then(response => response.data)\n}\n\nconst update = (contactId, newData) => {\n    return axios.put(`${baseUrl}${contactId}/`, newData).then(response => response.data)\n}\n\nconst service = {\n    getAll,\n    create,\n    deleteContact,\n    update,\n}\n\nexport default service\n","import React from 'react'\n\nconst Notification = ({message, type}) => (\n    message && <div className={type}>\n        {message}\n    </div>\n)\n\nexport default Notification\n","import React, {useEffect, useState} from 'react'\nimport Filter from './Filter'\nimport AddPersonForm from './AddPersonForm'\nimport PersonsList from './PersonsList'\nimport contactsService from './services/contacts'\nimport Notification from \"./Notification\";\n\nconst App = () => {\n    const [persons, setPersons] = useState([])\n    const [newName, setNewName] = useState('')\n    const [newNumber, setNewNumber] = useState('')\n    const [filter, setFilter] = useState('')\n    const [notification, setNotification] = useState(null)\n    const [notificationType, setNotificationType] = useState('success')\n\n    useEffect(() => {\n        contactsService.getAll().then(response => {\n            setPersons(response)\n        })\n    }, [])\n\n    const showNotification = (message, type) => {\n        setNotificationType(type)\n        setNotification(message)\n        setTimeout(() => setNotification(null), 5000)\n    }\n\n    const addNewName = event => {\n        event.preventDefault()\n\n        const currentContact = persons.find(person => person.name === newName)\n\n        if (currentContact) {\n            if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\n                contactsService.update(currentContact.id, {\n                    name: newName,\n                    number: newNumber\n                }).then((response) => {\n                    setPersons(persons.filter(person => person.id !== currentContact.id).concat(response))\n                    showNotification(`Updated phone number for ${newName}`, 'success')\n                    setNewName('')\n                    setNewNumber('')\n                })\n            }\n        } else {\n            contactsService.create({\n                name: newName,\n                number: newNumber\n            }).then((response) => {\n                setPersons(persons.concat(response))\n                showNotification(`Added ${newName}`, 'success')\n                setNewName('')\n                setNewNumber('')\n            })\n        }\n    }\n\n    const deleteContact = contactId => {\n        const contactName = persons.find(person => person.id === contactId).name\n        if (window.confirm(`Delete ${contactName}?`)) {\n            contactsService.deleteContact(contactId)\n                .then(() => {\n                    setPersons(persons.filter(person => person.id !== contactId))\n                    showNotification(`Deleted ${contactName}`, 'success')\n                })\n                .catch(() => {\n                    showNotification(`Information of ${contactName} has already been removed from server`, 'error')\n                })\n        }\n    }\n\n    return (\n        <div>\n            <h2>Phonebook</h2>\n            <Notification message={notification} type={notificationType}/>\n            <Filter value={filter} onChange={setFilter}/>\n            <h2>Add new</h2>\n            <AddPersonForm name={newName} number={newNumber}\n                           onNameChange={setNewName}\n                           onNumberChange={setNewNumber}\n                           onSubmit={addNewName}/>\n            <h2>Numbers</h2>\n            <PersonsList filter={filter} persons={persons} onDeleteClick={deleteContact}/>\n        </div>\n    )\n}\n\nexport default App\n","import ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n)\n"],"sourceRoot":""}